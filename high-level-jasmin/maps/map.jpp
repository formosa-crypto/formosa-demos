inline fn plus_one(reg u64 a) -> reg u64
{
  a += 1;
  return a;
}

inline fn __map_simple_plus_one_u64_16(reg ptr u64[16] a) -> reg ptr u64[16]
{
  reg u64 i;
  inline int j;
  reg u64 elem;

  i = 0;
  while(i < 16)
  {
    elem = a[(int) i];
    elem = plus_one(elem);
    a[(int) i] = elem;
    i += 1;
  }

  return a;
}

inline fn __map_optimized_plus_one_u64_16_4(reg ptr u64[16] a) -> reg ptr u64[16]
{
  reg u64 i;
  inline int j;
  reg u64 elem;

  i = 0;
  while(i < (16 / 4) * 4)
  {
    for j=0 to 4
    {
      elem = a[(int) i];
      elem = plus_one(elem);
      a[(int) i] = elem;
      i += 1;
    }
  }

  for j=0 to (16 % 4)
  {
    elem = a[(int) i];
    elem = plus_one(elem);
    a[(int) i] = elem;
    i += 1;
  }

  return a;
}

// /////////////////////////////////////////////////////////////////////////////

param int L = 16;

inline fn __mem_to_array_u64(reg u64 p) -> stack u64[L]
{
  stack u64[L] a;
  reg ptr u64[L] pa;
  reg u64 ai i;

  pa = a;
  i = 0;
  while (i < L) {
    ai = (u64)[p + 8 * i];
    pa[(int) i] = ai;
    i += 1;
  }
  a = pa;
  return a;
}

inline fn __array_to_mem_u64(stack u64[L] a, reg u64 p)
{
  reg u64 ai i;
  reg ptr u64[L] pa;

  pa = a;
  i = 0;
  while (i < L) {
    ai = pa[(int) i];
    (u64)[p + 8 * i] = ai;
    i += 1;
  }
}

// /////////////////////////////////////////////////////////////////////////////

export fn test_map_simple_u64(reg u64 p)
{
  stack u64[L] a;
  reg ptr u64[L] ap;

  a = __mem_to_array_u64(p);

  ap = a;
  a = __map_simple_plus_one_u64_16(ap);

  __array_to_mem_u64(a, p);
}

export fn test_map_optimized_u64(reg u64 p)
{
  stack u64[L] a;
  reg ptr u64[L] ap;

  a = __mem_to_array_u64(p);

  ap = a;
  a = __map_optimized_plus_one_u64_16_4(ap);

  __array_to_mem_u64(a, p);
}
